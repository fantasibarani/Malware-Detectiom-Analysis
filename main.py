# Importing libraries
import pandas as pd
import numpy as np
import math
import operator
from protocol_tcp import *
from protocol_udp import *
from packet_data import *
from timestamp import *
from test import *
x=0
y=0
z=0
dns1_node=size_a_tcp+size_a
dns2_node=size_b_tcp+size_b
dns3_node=size_c_tcp+size_c
if dns1_node!=0:
    x=1
if dns2_node!=0:
    y=1
if dns3_node!=0:
    z=1

# untuk menampilkan jumlah port yang di akses
port_dns1=[]
port_dns1.append(prodns1)
port_dns1.append(prodnsudp1)
port_dns2=[]
port_dns2.append(prodns2)
port_dns2.append(prodnsudp2)
port_dns3=[]
port_dns3.append(prodns3)
port_dns3.append(prodnsudp3)

print "DNS 1 : ", port_dns1
print "DNS 2 : ", port_dns2
print "DNS 3 : ", port_dns3

print"--------------------------------------------------------------------------------\n"

print"--------------------------------------------------------------------------------\n"

print"---------------PENDETEKSIAN MALWARE TERHADAP AKTIVITAS JARINGAN----------------\n"
print"--------------------------------------------------------------------------------\n"


# 1. Graph Size
node=[]
node.append(a_pro)
node.append(b_pro)
node.append(c_pro)
node.append(a_pr)
node.append(b)
node.append(c)
node.append(x)
node.append(y)
node.append(z)
graph_size=sum(node)
# print "Graph Size	 	: ", graph_size



# 2.Root Out Degree
root=[]
root.append(root_out_tcp)
root.append(root_out_udp)
rootoutdegree=sum(root)
# print "Root Out Degree	 	: ", rootoutdegree

# 3. Average Out Degree
avrg=rootoutdegree/graph_size


# 4. Max Out Degree
maxout=max(rod_tcp_1,rod_tcp_2,rod_tcp_3,rod_udp_1,rod_udp_2,rod_udp_3)
# print "Max Out Degree 		: ", maxout

 # 5. Packet Data
# print "Number of Paket Data 	: ", count

# 6. Data Length
# print "Data Length  		: ", panjang

# 7. Timestamp
# print "Timestamp 		: ", ts




# ---------------------------    PENERAPAN ALGORITMA UNTUK DATA SET DAN TRAIN    ---------------------------------
# Example of kNN implemented from Scratch in Python
import csv
import random
import math
import operator
 
def loadDataset(filename, split, trainingSet=[] , testSet=[]):
    with open(filename, 'rb') as csvfile:
        lines = csv.reader(csvfile)
        dataset = list(lines)
        for x in range(len(dataset)-1):
            for y in range(7):
                dataset[x][y] = float(dataset[x][y])
            if random.random() < split:
                trainingSet.append(dataset[x])
            else:
                testSet.append(dataset[x])
 
 
def euclideanDistance(instance1, instance2, length):
    distance = 0
    for x in range(length):
        distance += pow((instance1[x] - instance2[x]), 2)
    return math.sqrt(distance)
 
def getNeighbors(trainingSet, testInstance, k):
    distances = []
    length = len(testInstance)-1
    for x in range(len(trainingSet)):
        dist = euclideanDistance(testInstance, trainingSet[x], length)
        distances.append((trainingSet[x], dist))
    distances.sort(key=operator.itemgetter(1))
    neighbors = []
    for x in range(k):
        neighbors.append(distances[x][0])
    return neighbors
 
def getResponse(neighbors):
    classVotes = {}
    for x in range(len(neighbors)):
        response = neighbors[x][-1]
        if response in classVotes:
            classVotes[response] += 1
        else:
            classVotes[response] = 1
    sortedVotes = sorted(classVotes.iteritems(), key=operator.itemgetter(1), reverse=True)
    return sortedVotes[0][0]
 
def getAccuracy(testSet, predictions):
    correct = 0
    for x in range(len(testSet)):
        if testSet[x][-1] == predictions[x]:
            correct += 1
    return (correct/float(len(testSet))) * 100.0
    
def main():
    # prepare data
    trainingSet=[]
    testSet=[ ]
    sample=[graph_size,rootoutdegree,avrg,maxout,count,panjang,ts]
    testSet.append(sample)
    split = 0.8
    loadDataset('data_set.csv', split, trainingSet, testSet)
    print 'Train set: ' + repr(len(trainingSet))
    print 'Test set: ' + repr(len(testSet))
    # generate predictions
    predictions=[]
    k = 3
    for x in range(len(testSet)):
        neighbors = getNeighbors(trainingSet, testSet[x], k)
        result = getResponse(neighbors)
        predictions.append(result)
        print('> predicted=' + repr(result) + ', actual=' + repr(testSet[x][-1]))
    accuracy = getAccuracy(testSet, predictions)
    print('Accuracy: ' + repr(accuracy) + '%')
    
main()
# ---------------------------PENERAPAN ALGORITMA K-NN UNTUK MEMPREDIKSI DATA BARU---------------------------------

data = pd.read_csv("dataset.csv")
#### End of STEP 1

# Defining a function which calculates euclidean distance between two data points
def euclideanDistance(data1, data2, length):
    distance = 0
    for x in range(length):
        distance += np.square(data1[x] - data2[x])
    return np.sqrt(distance)

# Defining our KNN model
def knn(trainingSet, testInstance, k):
 
    distances = {}
    sort = {}
 
    length = testInstance.shape[1]
    
    #### Start of STEP 3
    # Calculating euclidean distance between each row of training data and test data
    for x in range(len(trainingSet)):
        
        #### Start of STEP 3.1
        dist = euclideanDistance(testInstance, trainingSet.iloc[x], length)

        distances[x] = dist[0]
        #### End of STEP 3.1
 
    #### Start of STEP 3.2
    # Sorting them on the basis of distance
    sorted_d = sorted(distances.items(), key=operator.itemgetter(1))
    #### End of STEP 3.2
 
    neighbors = []
    
    #### Start of STEP 3.3
    # Extracting top k neighbors
    for x in range(k):
        neighbors.append(sorted_d[x][0])
    #### End of STEP 3.3
    classVotes = {}
    
    #### Start of STEP 3.4
    # Calculating the most freq class in the neighbors
    for x in range(len(neighbors)):
        response = trainingSet.iloc[neighbors[x]][-1]
 
        if response in classVotes:
            classVotes[response] += 1
        else:
            classVotes[response] = 1
    #### End of STEP 3.4

    #### Start of STEP 3.5
    sortedVotes = sorted(classVotes.items(), key=operator.itemgetter(1), reverse=True)
    return(sortedVotes[0][0], neighbors)
    #### End of STEP 3.5

# Deklarasi Attribut
print "Graph Size               : ", graph_size
print "Root Out Degree          : ", rootoutdegree
print "Average Out Degree       : ", avrg
print "Max Out Degree           : ", maxout
print "Number of Paket Data     : ", count
print "Data Length              : ", panjang
print "Timestamp                : ", ts
# Akhir Deklarasi Attribut
testSet= list()

testSet=[[graph_size,rootoutdegree,avrg,maxout,count,panjang,ts]]

test = pd.DataFrame(testSet)

k = 3

result,neigh = knn(data, test, k)
print "------------------------------------------------------"
print data.head()
print "------------------------------------------------------"
print "\n"
print "Test Set",testSet

print "3 nearest neighbors :", neigh

print "Prediction Class :",result
